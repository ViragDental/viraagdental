{"ast":null,"code":"import _regeneratorRuntime from \"D:\\\\projects\\\\Cricket\\\\akshu close\\\\IPL\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\projects\\\\Cricket\\\\akshu close\\\\IPL\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"D:\\\\projects\\\\Cricket\\\\akshu close\\\\IPL\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"D:\\\\projects\\\\Cricket\\\\akshu close\\\\IPL\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"D:\\\\projects\\\\Cricket\\\\akshu close\\\\IPL\\\\material-dashboard-react-master\\\\src\\\\views\\\\MyTeam\\\\MyTeam.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from \"axios\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Table from \"components/Table/Table.js\";\nimport { makeStyles } from '@material-ui/core/styles'; // import { UserContext } from \"../../UserContext\";\n// import { Typography } from '@material-ui/core';\n\nimport GridItem from \"components/Grid/GridItem.js\";\nimport Card from \"components/Card/Card.js\"; // import CardAvatar from \"components/Card/CardAvatar.js\";\n\nimport CardBody from \"components/Card/CardBody.js\";\nimport Avatar from \"@material-ui/core/Avatar\";\nvar drawerWidth = 100;\nvar useStyles = makeStyles(function (theme) {\n  return {\n    margin: {\n      margin: theme.spacing(1)\n    },\n    image: {\n      height: \"200px\"\n    },\n    container: {\n      backgroundImage: \"url(\\\"../RCB/5334.jpg\\\")\",\n      backgroundSize: 'cover'\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0\n    },\n    drawerPaper: {\n      width: drawerWidth\n    },\n    drawerHeader: _objectSpread(_objectSpread({\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1)\n    }, theme.mixins.toolbar), {}, {\n      justifyContent: 'flex-start'\n    }),\n    sold: {\n      color: \"green\"\n    },\n    cardCategoryWhite: {\n      color: \"rgba(255,255,255,.62)\",\n      margin: \"0\",\n      fontSize: \"14px\",\n      marginTop: \"0\",\n      marginBottom: \"0\"\n    },\n    cardTitleWhite: {\n      color: \"#FFFFFF\",\n      marginTop: \"0px\",\n      minHeight: \"auto\",\n      fontWeight: \"300\",\n      fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n      marginBottom: \"3px\",\n      textDecoration: \"none\"\n    },\n    large: {\n      width: theme.spacing(12),\n      height: theme.spacing(12)\n    },\n    medium: {\n      width: theme.spacing(7),\n      height: theme.spacing(7)\n    }\n  };\n}); // const populateTable = (data) => {\n//     const tableData = [];\n//     data.forEach(element => {\n//         tableData.push({ displayName: element.displayName, players: element.players })\n//     });\n//     return tableData;\n// }\n\nexport default function App() {\n  var _this = this;\n\n  // const { user } = useContext(UserContext);\n  // const theme = useTheme();\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      teamArray = _useState2[0],\n      setTeamArray = _useState2[1];\n\n  useEffect(function () {\n    var fetchTeam = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var myTeamUrl, response, data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                myTeamUrl = \"\";\n                if (localStorage.getItem(\"admin\") === \"true\") myTeamUrl = \"/user/myteam/\".concat(localStorage.getItem(\"gid\"), \"/all\");else if (localStorage.getItem(\"ismember\") === \"true\") myTeamUrl = \"/user/myteam/\".concat(localStorage.getItem(\"gid\"), \"/\").concat(localStorage.getItem(\"uid\"));\n\n                if (!(myTeamUrl.length > 0)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                _context.next = 6;\n                return axios.get(myTeamUrl);\n\n              case 6:\n                response = _context.sent;\n                // data = populateTable(response.data);\n                // console.log(response.data);\n                setTeamArray(response.data);\n                _context.next = 12;\n                break;\n\n              case 10:\n                data = [{\n                  displayName: \"Not a team member\",\n                  players: [{\n                    playerName: \"\",\n                    team: \"\",\n                    bidAmount: \"\"\n                  }]\n                }];\n                setTeamArray(data);\n\n              case 12:\n                _context.next = 17;\n                break;\n\n              case 14:\n                _context.prev = 14;\n                _context.t0 = _context[\"catch\"](0);\n                console.log(_context.t0);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 14]]);\n      }));\n\n      return function fetchTeam() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fetchTeam();\n  }, []); // return (\n  //     teamArray.map(team => \n  //     <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n  //         <Typography>{team.displayName}</Typography>\n  //         <Table\n  //             tableHeaderColor=\"warning\"\n  //             tableHead={[\"Player Name\", \"Team\", \"Bid Amount\"]}\n  //             tableData={team.players.map(team => {\n  //                 const arr = [team.playerName, team.team, team.bidAmount]\n  //                 return { data: arr, collapse: [] }\n  //             })}\n  //         />\n  //     </Grid>           \n  //     )\n  // )\n  // <Grid container justify=\"center\" alignItems=\"center\">\n  // <Grid item xs={12}>\n  //     <div key={team.displayName}>\n\n  return teamArray.map(function (team) {\n    return /*#__PURE__*/React.createElement(Grid, {\n      key: team.displayName,\n      container: true,\n      justify: \"center\",\n      alignItems: \"center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(GridItem, {\n      key: team.displayName,\n      xs: 12,\n      sm: 12,\n      md: 12,\n      lg: 12,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      key: team.displayName,\n      profile: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      key: team.displayName,\n      profile: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: classes.cardTitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 37\n      }\n    }, team.displayName), /*#__PURE__*/React.createElement(Table, {\n      key: team.displayName,\n      id: team.displayName,\n      tableHeaderColor: \"warning\",\n      tableHead: [\"Player Name\", \"Team\", \"Bid Amount\"],\n      tableData: team.players.map(function (team) {\n        var arr = [team.playerName, /*#__PURE__*/React.createElement(Avatar, {\n          variant: \"circle\",\n          src: \"\".concat(process.env.PUBLIC_URL, \"/\").concat(team.team, \".JPG\"),\n          className: classes.medium,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 49\n          }\n        }), team.bidAmount];\n        return {\n          data: arr,\n          collapse: []\n        };\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 37\n      }\n    })))));\n  });\n}\n; // </div>\n// </Grid>\n// </Grid>","map":{"version":3,"sources":["D:/projects/Cricket/akshu close/IPL/material-dashboard-react-master/src/views/MyTeam/MyTeam.js"],"names":["React","useEffect","useState","axios","Grid","Table","makeStyles","GridItem","Card","CardBody","Avatar","drawerWidth","useStyles","theme","margin","spacing","image","height","container","backgroundImage","backgroundSize","drawer","width","flexShrink","drawerPaper","drawerHeader","display","alignItems","padding","mixins","toolbar","justifyContent","sold","color","cardCategoryWhite","fontSize","marginTop","marginBottom","cardTitleWhite","minHeight","fontWeight","fontFamily","textDecoration","large","medium","App","classes","teamArray","setTeamArray","fetchTeam","myTeamUrl","localStorage","getItem","length","get","response","data","displayName","players","playerName","team","bidAmount","console","log","map","cardTitle","arr","process","env","PUBLIC_URL","collapse"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from \"axios\";\r\n\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Table from \"components/Table/Table.js\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// import { UserContext } from \"../../UserContext\";\r\n// import { Typography } from '@material-ui/core';\r\nimport GridItem from \"components/Grid/GridItem.js\";\r\nimport Card from \"components/Card/Card.js\";\r\n// import CardAvatar from \"components/Card/CardAvatar.js\";\r\nimport CardBody from \"components/Card/CardBody.js\";\r\nimport Avatar from \"@material-ui/core/Avatar\"\r\n\r\nconst drawerWidth = 100;\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    image: {\r\n        height: \"200px\"\r\n    },\r\n    container: {\r\n        backgroundImage: \"url(\\\"../RCB/5334.jpg\\\")\",\r\n        backgroundSize: 'cover'\r\n    }, drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n    sold: {\r\n        color: \"green\"\r\n    }, cardCategoryWhite: {\r\n        color: \"rgba(255,255,255,.62)\",\r\n        margin: \"0\",\r\n        fontSize: \"14px\",\r\n        marginTop: \"0\",\r\n        marginBottom: \"0\"\r\n    },\r\n    cardTitleWhite: {\r\n        color: \"#FFFFFF\",\r\n        marginTop: \"0px\",\r\n        minHeight: \"auto\",\r\n        fontWeight: \"300\",\r\n        fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\r\n        marginBottom: \"3px\",\r\n        textDecoration: \"none\"\r\n    },\r\n    large: {\r\n        width: theme.spacing(12),\r\n        height: theme.spacing(12),\r\n    },\r\n    medium: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7),\r\n    }\r\n}));\r\n\r\n\r\n// const populateTable = (data) => {\r\n//     const tableData = [];\r\n//     data.forEach(element => {\r\n//         tableData.push({ displayName: element.displayName, players: element.players })\r\n//     });\r\n//     return tableData;\r\n// }\r\n\r\nexport default function App() {\r\n    // const { user } = useContext(UserContext);\r\n    // const theme = useTheme();\r\n\r\n    const classes = useStyles();\r\n    const [teamArray, setTeamArray] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchTeam = async () => {\r\n            try {\r\n                var myTeamUrl = \"\";\r\n                if (localStorage.getItem(\"admin\") === \"true\")\r\n                    myTeamUrl = `/user/myteam/${localStorage.getItem(\"gid\")}/all`;\r\n                else if (localStorage.getItem(\"ismember\") === \"true\")\r\n                    myTeamUrl = `/user/myteam/${localStorage.getItem(\"gid\")}/${localStorage.getItem(\"uid\")}`;\r\n                \r\n                if (myTeamUrl.length > 0) {\r\n                    var response = await axios.get(myTeamUrl);\r\n                    // data = populateTable(response.data);\r\n                    // console.log(response.data);\r\n                    setTeamArray(response.data);\r\n                } else {\r\n                    var data = [{displayName: \"Not a team member\", players: [{playerName: \"\", team: \"\", bidAmount: \"\"}] }];\r\n                    setTeamArray(data);\r\n                }\r\n            } catch (e) {\r\n                console.log(e)\r\n            }\r\n        }\r\n        fetchTeam();\r\n    }, []);\r\n\r\n\r\n\r\n\r\n    // return (\r\n    //     teamArray.map(team => \r\n    //     <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n    //         <Typography>{team.displayName}</Typography>\r\n    //         <Table\r\n    //             tableHeaderColor=\"warning\"\r\n    //             tableHead={[\"Player Name\", \"Team\", \"Bid Amount\"]}\r\n    //             tableData={team.players.map(team => {\r\n    //                 const arr = [team.playerName, team.team, team.bidAmount]\r\n    //                 return { data: arr, collapse: [] }\r\n    //             })}\r\n    //         />\r\n    //     </Grid>           \r\n    //     )\r\n\r\n    // )\r\n\r\n    // <Grid container justify=\"center\" alignItems=\"center\">\r\n    // <Grid item xs={12}>\r\n    //     <div key={team.displayName}>\r\n\r\n    return (\r\n        teamArray.map(team => \r\n                    <Grid key={team.displayName} container justify=\"center\" alignItems=\"center\" >\r\n                        <GridItem key={team.displayName} xs={12} sm={12} md={12} lg={12} >\r\n                            <Card key={team.displayName} profile>\r\n                                <CardBody key={team.displayName} profile>\r\n                                    <h3 className={classes.cardTitle}>{team.displayName}</h3>\r\n                                    <Table\r\n                                        key={team.displayName}\r\n                                        id={team.displayName}\r\n                                        tableHeaderColor=\"warning\"\r\n                                        tableHead={[\"Player Name\", \"Team\", \"Bid Amount\"]}\r\n                                        tableData={team.players.map(team => {\r\n                                            const arr = [team.playerName, \r\n                                                <Avatar variant=\"circle\" src={`${process.env.PUBLIC_URL}/${team.team}.JPG`} className={classes.medium} />, \r\n                                                team.bidAmount]\r\n                                            return { data: arr, collapse: [] }\r\n                                        })}\r\n                                    />\r\n                                </CardBody>\r\n                            </Card>\r\n                        </GridItem>\r\n                    </Grid>\r\n        )\r\n    )\r\n};\r\n// </div>\r\n// </Grid>\r\n// </Grid>\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}