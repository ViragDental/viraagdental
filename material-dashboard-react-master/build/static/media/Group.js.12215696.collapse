import React, { useEffect, useState, useContext } from 'react';
import PropTypes from 'prop-types';
import { useHistory } from "react-router-dom";
import { UserContext } from "../../UserContext";
import { makeStyles } from '@material-ui/core/styles';
import axios from "axios";
import Button from '@material-ui/core/Button';
import Paper from '@material-ui/core/Paper';
import Grid from '@material-ui/core/Grid';
import Box from '@material-ui/core/Box';
import Collapse from '@material-ui/core/Collapse';
import IconButton from '@material-ui/core/IconButton';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import Typography from '@material-ui/core/Typography';
import KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';
import KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';
import { cdCurrent, cdDefault, hasGroup, getUserBalance} from "views/functions.js"
import {BlankArea, NothingToDisplay, DisplayBalance} from "CustomComponents/CustomComponents.js"
import green from '@material-ui/core/colors/green';
import {setTab} from "CustomComponents/CricDreamTabs.js"

const useStyles = makeStyles((theme) => ({
  root: {
    '& > *': {
      borderBottom: 'unset',
    },
  },
  symbolText: {
      color: '#4CC417',
      // backgroundColor: green[700],
  },
  headerText: {
    color: '#FF7043',
    fontWeight: 700,
    // backgroundColor: green[700],
  },
  button: {
      margin: theme.spacing(0, 1, 0),
    },
  heading: {
    fontSize: theme.typography.pxToRem(15),
    flexBasis: '33.33%',
    flexShrink: 0,
  },
  secondaryHeading: {
    fontSize: theme.typography.pxToRem(15),
    color: theme.palette.text.secondary,
  },
}
));



function createData(name, calories, fat, carbs, protein, price) {
  return {
    name,
    calories,
    fat,
    carbs,
    protein,
    price,
    history: [
      { date: '2020-01-05', customerId: '11091700', amount: 3 },
      { date: '2020-01-02', customerId: 'Anonymous', amount: 1 },
    ],
  };
}



// const rows = [
//   createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),
//   createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),
//   createData('Eclair', 262, 16.0, 24, 6.0, 3.79),
//   createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),
//   createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5),
// ];

export default function Group() {
  const classes = useStyles();
  const [myGroupTableData, setMyGroupTableData] = useState([]);
  const history = useHistory();
  const [newCurrentGroup, setNewCurrentGroup] = useState(localStorage.getItem("groupName"));
  const [balance, setBalance] = useState(0);
  const [openGroup, setOpenGroup] = useState("Eclair")
  useEffect(() => {
    const a = async () => {
        let myBalance = await getUserBalance();
        setBalance(myBalance);
        // console.log(myBalance); 

        window.localStorage.setItem("groupMember", "");
        var myUrl = `${process.env.REACT_APP_AXIOS_BASEPATH}/group/memberof/${localStorage.getItem("uid")}`;
        const teamResponse = await axios.get(myUrl);
        // console.log(teamResponse.data[0].groups);
        let setnew = true;
        if (hasGroup()) {
            // just check if current group is part of group list 
            let tmp = teamResponse.data[0].groups.find(x => x.gid == localStorage.getItem("gid"));
            if (tmp) setnew = false;
        }
        // console.log(`Set new is ${setnew}`);
        if (setnew) {
            if (teamResponse.data[0].groups.length > 0) {
                var myGroup = teamResponse.data[0].groups[0];
                // console.log(myGroup);
                localStorage.setItem("gid", myGroup.gid.toString());
                localStorage.setItem("groupName", myGroup.groupName);
                localStorage.setItem("tournament", myGroup.tournament);
                localStorage.setItem("admin", false)
                setNewCurrentGroup(myGroup.name);
            } else {
                localStorage.setItem("gid", "");
                localStorage.setItem("groupName", "");
                localStorage.setItem("tournament", "");
                localStorage.setItem("admin", false)
                setNewCurrentGroup("");
            }
        }
        setMyGroupTableData(teamResponse.data[0].groups);
        // console.log(teamResponse.data[0].groups);
        }
    a();
}, [])


const rows = [
  createData('Frozen yoghurt', 159, 6.0, 24, 4.0, 3.99),
  createData('Ice cream sandwich', 237, 9.0, 37, 4.3, 4.99),
  createData('Eclair', 262, 16.0, 24, 6.0, 3.79),
  createData('Cupcake', 305, 3.7, 67, 4.3, 2.5),
  createData('Gingerbread', 356, 16.0, 49, 3.9, 1.5),
];
  
function TblHdr(props) {
  return (
    <Grid item xs={props.cols}>
      <Typography className={classes.headerText}>{props.text}</Typography>
    </Grid>
  );
}

function handleNewGroup() {
  //history.push("/newgroup");        
  setTab(parseInt(process.env.REACT_APP_BASEPOS) + parseInt(process.env.REACT_APP_NEWGROUP));
};

function handleJoinGroup() {
  // history.push("/admin/newgroup"); 
  localStorage.setItem("joinGroupCode", "");       
  setTab(parseInt(process.env.REACT_APP_BASEPOS) + parseInt(process.env.REACT_APP_JOINGROUP));
};

function ShowGroupHeader() {
  return (
  <Grid container color="secondary" align="center" spacing={0}>
  <TblHdr cols={1} text="" />
  <TblHdr cols={7} text="Group" />
  <TblHdr cols={2} text="Curr" />
  <TblHdr cols={2} text="Def" />
  </Grid>
  );
}

function handleGroupSelect(xxx) {
  console.log(xxx);
  setOpenGroup(xxx);
}

function GroupRow(props) {
  const { row } = props;
  // const [open, setOpen] = React.useState(false);
  // console.log(props);
  let isOpen = (openGroup === row.name) ? true : false;
  console.log(`Key is ${row.name} ${isOpen} `);
 //onClick={handleGroupSelect(row.name)}
  return (
      <div>
      <Grid container color="secondary" align="center" spacing={0}>
        <Grid item xs={1}>
          <IconButton aria-label="expand row" size="small" onClick={handleGroupSelect}>
            {isOpen ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
          </IconButton>
        </Grid>
        <Grid item xs={7}>
          {row.name}
        </Grid>
        <Grid item xs={2}>
        {row.calories}
        </Grid>
        <Grid item xs={2}>
        {row.fat}
        </Grid>
        </Grid>
      </div>
  );
}

/***
GroupRow.propTypes = {
  row: PropTypes.shape({
    calories: PropTypes.number.isRequired,
    carbs: PropTypes.number.isRequired,
    fat: PropTypes.number.isRequired,
    history: PropTypes.arrayOf(
      PropTypes.shape({
        amount: PropTypes.number.isRequired,
        customerId: PropTypes.string.isRequired,
        date: PropTypes.string.isRequired,
      }),
    ).isRequired,
    name: PropTypes.string.isRequired,
    price: PropTypes.number.isRequired,
    protein: PropTypes.number.isRequired,
  }).isRequired,
};
***/

/**
function OrgGroupRow(props) {
  const { row } = props;
  // const [open, setOpen] = React.useState(false);
  const classes = useStyles();
  let isOpen = (openGroup === row.name);
  return (
    <React.Fragment>
      <Grid container color="secondary" align="center" spacing={0}>
        <Grid item xs={1}>
          <IconButton aria-label="expand row" size="small" onClick={handleGroupSelect(row.name)}>
            {isOpen ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}
          </IconButton>
        </Grid>
        <Grid item xs={7}>
          {row.name}
        </Grid>
        <Grid item xs={2}>
        {row.calories}
        </Grid>
        <Grid item xs={2}>
        {row.fat}
        </Grid>
        </Grid>
      <TableRow>
        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>
          <Collapse in={isOpen} timeout="auto" unmountOnExit>
            <Box margin={1}>
              <Typography variant="h6" gutterBottom component="div">
                History
              </Typography>
              <Table size="small" aria-label="purchases">
                <TableHead>
                  <TableRow>
                    <TableCell>Date</TableCell>
                    <TableCell>Customer</TableCell>
                    <TableCell align="right">Amount</TableCell>
                    <TableCell align="right">Total price ($)</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {row.history.map((historyRow) => (
                    <TableRow key={historyRow.date}>
                      <TableCell component="th" scope="row">
                        {historyRow.date}
                      </TableCell>
                      <TableCell>{historyRow.customerId}</TableCell>
                      <TableCell align="right">{historyRow.amount}</TableCell>
                      <TableCell align="right">
                        {Math.round(historyRow.amount * row.price * 100) / 100}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </Box>
          </Collapse>
        </TableCell>
      </TableRow>
    </React.Fragment>
  );
}
 */

// function ShowGroupBody() {
//   return (
//   );
// };

  return (
    <div className={classes.root} align="center" key="groupinfo">
    <DisplayBalance balance={balance} />
    <h3 align="center">My Groups</h3>
    <ShowGroupHeader />
    {rows.map((row) => (
      <GroupRow key={row.name} row={row} />
    ))}
    <BlankArea />
    <Button key={"create"} variant="contained" color="primary" size="small"
      className={classes.button} onClick={handleNewGroup}>New Group
    </Button>
    <Button key={"progile"} variant="contained" color="primary" size="small"
        className={classes.button} onClick={handleJoinGroup}>Join Group
    </Button>
    </div>
  );
}

